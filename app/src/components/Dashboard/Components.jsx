import React from "react"
import { motion } from "framer-motion"
import TextField from '@atlaskit/textfield';
import { Link } from "react-router-dom";

export const BackArrow = () => (<>
    <div className="BackArrow">
        <svg width="24" height="22" viewBox="0 0 24 22" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M22.5 9.49993H4.71L10.155 2.95992C10.4096 2.6536 10.5321 2.25868 10.4955 1.86204C10.459 1.4654 10.2663 1.09953 9.96 0.844925C9.65368 0.590317 9.25875 0.467825 8.86211 0.504394C8.46547 0.540964 8.09961 0.7336 7.845 1.03993L0.345 10.0399C0.294541 10.1115 0.249419 10.1867 0.21 10.2649C0.21 10.3399 0.21 10.3849 0.105 10.4599C0.0370105 10.6319 0.00141168 10.815 0 10.9999C0.00141168 11.1849 0.0370105 11.3679 0.105 11.5399C0.105 11.6149 0.105 11.6599 0.21 11.7349C0.249419 11.8131 0.294541 11.8883 0.345 11.9599L7.845 20.9599C7.98603 21.1292 8.16264 21.2654 8.36227 21.3588C8.56189 21.4521 8.77963 21.5003 9 21.4999C9.35048 21.5006 9.69013 21.3785 9.96 21.1549C10.1119 21.029 10.2374 20.8743 10.3295 20.6998C10.4215 20.5253 10.4782 20.3343 10.4963 20.1379C10.5144 19.9414 10.4936 19.7433 10.435 19.5549C10.3765 19.3665 10.2813 19.1915 10.155 19.0399L4.71 12.4999H22.5C22.8978 12.4999 23.2794 12.3419 23.5607 12.0606C23.842 11.7793 24 11.3977 24 10.9999C24 10.6021 23.842 10.2206 23.5607 9.93927C23.2794 9.65796 22.8978 9.49993 22.5 9.49993Z" fill="#6C757D" />
        </svg>

    </div>
</>)
export const SectionTitle = (title, text, icon) => (
    <div className="PageTitle">
        <span className="Title">{title}</span>
        {icon ? <>
            <span className="CTA">{text} {icon}</span>
        </> : null}
    </div>
)

export const DownloadSVG = () => (
    <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g clip-path="url(#clip0_374_861)">
            <path d="M19.0809 21.84L17.3342 23.52V16C17.3342 15.6464 17.1938 15.3072 16.9437 15.0572C16.6937 14.8071 16.3545 14.6667 16.0009 14.6667C15.6473 14.6667 15.3081 14.8071 15.0581 15.0572C14.808 15.3072 14.6676 15.6464 14.6676 16V23.4533L12.9476 21.72C12.8232 21.5957 12.6757 21.4971 12.5132 21.4298C12.3508 21.3625 12.1767 21.3279 12.0009 21.3279C11.8251 21.3279 11.651 21.3625 11.4886 21.4298C11.3261 21.4971 11.1785 21.5957 11.0542 21.72C10.9299 21.8443 10.8313 21.9919 10.764 22.1543C10.6967 22.3168 10.6621 22.4908 10.6621 22.6667C10.6621 22.8425 10.6967 23.0166 10.764 23.179C10.8313 23.3414 10.9299 23.489 11.0542 23.6133L15.0542 27.6133C15.1788 27.7369 15.3266 27.8347 15.489 27.901C15.6515 27.9674 15.8254 28.001 16.0009 28C16.3442 27.9986 16.6737 27.8649 16.9209 27.6267L20.9209 23.76C21.0624 23.6432 21.1782 23.4986 21.2613 23.335C21.3443 23.1714 21.3926 22.9925 21.4034 22.8094C21.4141 22.6263 21.3869 22.4429 21.3235 22.2708C21.2601 22.0987 21.1619 21.9415 21.0349 21.809C20.908 21.6766 20.7552 21.5718 20.5859 21.5011C20.4166 21.4305 20.2346 21.3955 20.0512 21.3984C19.8678 21.4013 19.6869 21.442 19.52 21.518C19.353 21.594 19.2036 21.7036 19.0809 21.84Z" fill="#13CD3C" />
            <path d="M23.5599 9.33333C23.0158 7.7614 21.9953 6.39815 20.6403 5.43328C19.2853 4.4684 17.6633 3.94989 15.9999 3.94989C14.3364 3.94989 12.7144 4.4684 11.3594 5.43328C10.0044 6.39815 8.98391 7.7614 8.43986 9.33333C7.24193 9.49377 6.11015 9.97686 5.16559 10.7309C4.22104 11.485 3.49924 12.4816 3.07741 13.6142C2.65559 14.7469 2.54961 15.9729 2.7708 17.1611C2.992 18.3493 3.53205 19.455 4.33319 20.36C4.42997 20.5305 4.56313 20.6775 4.7232 20.7906C4.88328 20.9037 5.06633 20.9802 5.25931 21.0145C5.4523 21.0488 5.65047 21.0401 5.83973 20.9891C6.02899 20.9381 6.20466 20.846 6.35426 20.7193C6.50385 20.5927 6.62368 20.4346 6.70521 20.2563C6.78675 20.0781 6.82797 19.884 6.82596 19.688C6.82395 19.492 6.77875 19.2989 6.69358 19.1223C6.6084 18.9458 6.48536 18.7902 6.33319 18.6667C5.81735 18.0899 5.47984 17.376 5.36158 16.6113C5.24331 15.8467 5.34937 15.0641 5.66689 14.3585C5.98442 13.6529 6.49978 13.0545 7.15052 12.6359C7.80126 12.2173 8.55944 11.9964 9.33319 12H9.46653C9.77846 12.0063 10.0827 11.903 10.3263 11.7081C10.57 11.5132 10.7375 11.239 10.7999 10.9333C11.0447 9.72769 11.6988 8.64375 12.6513 7.86519C13.6039 7.08663 14.7963 6.66131 16.0265 6.66131C17.2568 6.66131 18.4492 7.08663 19.4017 7.86519C20.3543 8.64375 21.0084 9.72769 21.2532 10.9333C21.3155 11.239 21.4831 11.5132 21.7267 11.7081C21.9703 11.903 22.2746 12.0063 22.5865 12H22.6665C23.4403 11.9964 24.1985 12.2173 24.8492 12.6359C25.4999 13.0545 26.0153 13.6529 26.3328 14.3585C26.6503 15.0641 26.7564 15.8467 26.6381 16.6113C26.5199 17.376 26.1824 18.0899 25.6665 18.6667C25.5491 18.7984 25.4589 18.9521 25.4013 19.1189C25.3438 19.2857 25.3198 19.4623 25.331 19.6384C25.3422 19.8145 25.3882 19.9867 25.4664 20.1449C25.5446 20.3031 25.6534 20.4442 25.7865 20.56C26.0296 20.7744 26.3424 20.8929 26.6665 20.8933C26.8558 20.8931 27.0429 20.8525 27.2154 20.7744C27.3878 20.6962 27.5416 20.5822 27.6665 20.44C28.4899 19.5366 29.049 18.4242 29.2828 17.2244C29.5166 16.0247 29.4161 14.7838 28.9922 13.6373C28.5683 12.4908 27.8373 11.483 26.8793 10.7239C25.9212 9.96484 24.7729 9.48379 23.5599 9.33333Z" fill="#13CD3C" />
        </g>
        <defs>
            <clipPath id="clip0_374_861">
                <rect width="32" height="32" fill="white" />
            </clipPath>
        </defs>
    </svg>
)
export const StatsCard = (text, data) => (
    <div className="statsCard">
        <span className="text">{text}</span>
        <span className="data">{data}</span>
    </div>
)
export const graphCard = (data) => (
    <div className="statsCard">
        <span className="data">{data}</span>
    </div>
)
export function Table({ rows, head, checkbox, status }) {

    const handleClickInput = (e) => {
        if (e.target.name === "selectAll") {
            if (e.target.checked === true) {
                console.log("Select All")
                for (let i of document.querySelectorAll(".TableCheckBox")) {
                    console.log(i.target)
                }
                setIsChecked(Array(rows.length).fill(true))
            } else {
                setIsChecked(Array(rows.length).fill(false))
            }
        } else {
            console.log(e.target.checked)
            let is = isChecked
            isChecked[e.target.dataset.ordre] = !isChecked[e.target.dataset.ordre]
            setIsChecked(is)
        }

    }
    const [isChecked, setIsChecked] = React.useState(Array(rows.length).fill(false))
    const Option = () => {
        const [open, isOpen] = React.useState(false)
        const ToggleDropDown = () => {
            console.log("Clicked")
            isOpen(!open)
        }
        return <>
            <button className="dropdown" onClick={ToggleDropDown}>
                <svg width="21" height="5" viewBox="0 0 21 5" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="2.5" cy="2.5" r="2.5" fill="#ADB5BD" />
                    <circle cx="10.5" cy="2.5" r="2.5" fill="#ADB5BD" />
                    <circle cx="18.5" cy="2.5" r="2.5" fill="#ADB5BD" />
                </svg>
            </button>
            <motion.div className="dropdown-content"
                initial={{
                    opacity: 0,
                    display: "none",
                    x: "-200px",
                }}

                animate={open ? {
                    display: "block",
                    opacity: 1,
                    transition: {
                        duration: 0.25
                    }
                } : {}
                }
            >
                <p>A propos de la commande</p>
                <p>Supprimer la commande</p>
                <p>Marqu√© comme fait</p>
            </motion.div>


        </>
    }

    return <table>
        <tr>
            <th>
                {checkbox ? <>
                    <input type="checkbox" id="scales" name="selectAll"
                        onClick={handleClickInput}
                    ></input>
                </> : null}


            </th>
            {head.map((item) => (
                <th>{item}</th>
            ))}
        </tr>
        {rows.map((item) => (
            <tr>
                <td>
                    {checkbox ? <>
                        <input type="checkbox" className="TableCheckBox" data-ordre={rows.indexOf(item)} id={item.title}
                            onClick={handleClickInput}
                        ></input>
                    </> : null}
                    {status ? <>
                        {
                            item.status === "Fait" ?
                                <div className="statusFait">Fait</div> :
                                <div className="statusAttente">En attente</div>
                        }
                    </> : null}



                </td>
                <td>{item.ProductName}</td>
                <td>{item.ProductBrand}</td>
                <td>{item.ProductDescription}</td>
                <td>{item.ProductStock}</td>
                <td>{item.ProductPrice}</td>

                <td><Option /></td>
            </tr>

        ))}


    </table>
}
export const AddButton = ({ text,link }) => (
    <button className="AddButton">
        <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M18.166 8.83332H11.166V1.83332C11.166 1.5239 11.0431 1.22716 10.8243 1.00837C10.6055 0.789573 10.3088 0.666656 9.99935 0.666656C9.68993 0.666656 9.39318 0.789573 9.17439 1.00837C8.9556 1.22716 8.83268 1.5239 8.83268 1.83332V8.83332H1.83268C1.52326 8.83332 1.22652 8.95624 1.00772 9.17503C0.788932 9.39382 0.666016 9.69057 0.666016 9.99999C0.666016 10.3094 0.788932 10.6062 1.00772 10.8249C1.22652 11.0437 1.52326 11.1667 1.83268 11.1667H8.83268V18.1667C8.83268 18.4761 8.9556 18.7728 9.17439 18.9916C9.39318 19.2104 9.68993 19.3333 9.99935 19.3333C10.3088 19.3333 10.6055 19.2104 10.8243 18.9916C11.0431 18.7728 11.166 18.4761 11.166 18.1667V11.1667H18.166C18.4754 11.1667 18.7722 11.0437 18.991 10.8249C19.2098 10.6062 19.3327 10.3094 19.3327 9.99999C19.3327 9.69057 19.2098 9.39382 18.991 9.17503C18.7722 8.95624 18.4754 8.83332 18.166 8.83332Z" fill="white" />
        </svg>
        <span>
        <Link to={link}>{text}</Link>

            

        </span>
    </button>
)
export const UtilityBar = ({button,text,link}) => (
    <div
        style={{
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between",
            marginTop:"2rem",
            marginBottom:"1rem"
        }}
    >
        <div className="flex start">

        
        <div className="filter">
            Cat√©gorie
            <span>
                Toutes
                <svg width="12" height="7" viewBox="0 0 12 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M6.00019 6.5C5.86858 6.50076 5.73812 6.47554 5.61628 6.42577C5.49444 6.37601 5.38363 6.30268 5.29019 6.21L1.29019 2.21C1.19695 2.11676 1.12299 2.00607 1.07253 1.88425C1.02207 1.76243 0.996094 1.63186 0.996094 1.5C0.996094 1.36814 1.02207 1.23757 1.07253 1.11575C1.12299 0.99393 1.19695 0.88324 1.29019 0.790002C1.38342 0.696763 1.49411 0.622802 1.61594 0.572342C1.73776 0.521882 1.86833 0.495911 2.00019 0.495911C2.13204 0.495911 2.26261 0.521882 2.38444 0.572342C2.50626 0.622802 2.61695 0.696763 2.71019 0.790002L6.00019 4.1L9.30019 0.920002C9.39218 0.817712 9.50428 0.735503 9.6295 0.678517C9.75471 0.621531 9.89033 0.590994 10.0279 0.588815C10.1654 0.586635 10.302 0.612861 10.4289 0.665852C10.5559 0.718843 10.6705 0.797459 10.7657 0.896784C10.8609 0.996108 10.9346 1.114 10.9821 1.2431C11.0297 1.37219 11.0501 1.50971 11.042 1.64704C11.034 1.78438 10.9977 1.91858 10.9355 2.04126C10.8732 2.16393 10.7863 2.27244 10.6802 2.36L6.68019 6.22C6.49731 6.39632 6.25419 6.49643 6.00019 6.5Z" fill="#2F45C5" />
                </svg>

            </span>
        </div>
        <div className="filter">
            Trier par
            <span >
                Prix
                <svg width="12" height="7" viewBox="0 0 12 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M6.00019 6.5C5.86858 6.50076 5.73812 6.47554 5.61628 6.42577C5.49444 6.37601 5.38363 6.30268 5.29019 6.21L1.29019 2.21C1.19695 2.11676 1.12299 2.00607 1.07253 1.88425C1.02207 1.76243 0.996094 1.63186 0.996094 1.5C0.996094 1.36814 1.02207 1.23757 1.07253 1.11575C1.12299 0.99393 1.19695 0.88324 1.29019 0.790002C1.38342 0.696763 1.49411 0.622802 1.61594 0.572342C1.73776 0.521882 1.86833 0.495911 2.00019 0.495911C2.13204 0.495911 2.26261 0.521882 2.38444 0.572342C2.50626 0.622802 2.61695 0.696763 2.71019 0.790002L6.00019 4.1L9.30019 0.920002C9.39218 0.817712 9.50428 0.735503 9.6295 0.678517C9.75471 0.621531 9.89033 0.590994 10.0279 0.588815C10.1654 0.586635 10.302 0.612861 10.4289 0.665852C10.5559 0.718843 10.6705 0.797459 10.7657 0.896784C10.8609 0.996108 10.9346 1.114 10.9821 1.2431C11.0297 1.37219 11.0501 1.50971 11.042 1.64704C11.034 1.78438 10.9977 1.91858 10.9355 2.04126C10.8732 2.16393 10.7863 2.27244 10.6802 2.36L6.68019 6.22C6.49731 6.39632 6.25419 6.49643 6.00019 6.5Z" fill="#2F45C5" />
                </svg>

            </span>

        </div>
        </div>
        <div className="flex end">
        <div
        style={{
            borderRadius:"30px",
            height:"100%"
        }}>
            <TextField
                isCompact
                placeholder="Rechercher"
                elemBeforeInput={
                    <div style={{ height: 30, width: 30, display: "flex", alignItems: "center", justifyContent: "center" }}>
                        <svg width="20" height="20" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M28.7908 26.5425L23.4075 21.175C25.1444 18.9622 26.0868 16.2297 26.0833 13.4167C26.0833 10.9114 25.3405 8.46247 23.9486 6.37945C22.5568 4.29643 20.5785 2.67291 18.264 1.7142C15.9495 0.755488 13.4026 0.504646 10.9455 0.993392C8.48844 1.48214 6.23145 2.68852 4.45999 4.45999C2.68852 6.23145 1.48214 8.48844 0.993392 10.9455C0.504646 13.4026 0.755488 15.9495 1.7142 18.264C2.67291 20.5785 4.29643 22.5568 6.37945 23.9486C8.46247 25.3405 10.9114 26.0833 13.4167 26.0833C16.2297 26.0868 18.9622 25.1444 21.175 23.4075L26.5425 28.7908C26.6897 28.9392 26.8648 29.057 27.0578 29.1374C27.2507 29.2178 27.4577 29.2592 27.6667 29.2592C27.8757 29.2592 28.0826 29.2178 28.2756 29.1374C28.4685 29.057 28.6436 28.9392 28.7908 28.7908C28.9392 28.6436 29.057 28.4685 29.1374 28.2756C29.2178 28.0826 29.2592 27.8757 29.2592 27.6667C29.2592 27.4577 29.2178 27.2507 29.1374 27.0578C29.057 26.8648 28.9392 26.6897 28.7908 26.5425ZM3.91667 13.4167C3.91667 11.5377 4.47384 9.70102 5.51771 8.13876C6.56158 6.57649 8.04528 5.35885 9.78118 4.63982C11.5171 3.92078 13.4272 3.73265 15.27 4.09921C17.1129 4.46577 18.8056 5.37056 20.1342 6.69916C21.4628 8.02776 22.3676 9.7205 22.7341 11.5633C23.1007 13.4061 22.9126 15.3163 22.1935 17.0522C21.4745 18.7881 20.2569 20.2718 18.6946 21.3156C17.1323 22.3595 15.2956 22.9167 13.4167 22.9167C10.8971 22.9167 8.48075 21.9158 6.69916 20.1342C4.91756 18.3526 3.91667 15.9362 3.91667 13.4167Z" fill="#2F45C5" />
                        </svg>
                    </div>
                }
                aria-label="Filter" />
        </div>
        {button===true ? 
        <AddButton text={text} link={link}/>
                :null
        }
        </div>
    </div>

)